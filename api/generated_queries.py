# AUTOGENERATED FROM:
#     'api/queries/get_companies.edgeql'
#     'api/queries/get_companies_by_id.edgeql'
#     'api/queries/get_companies_by_id_employees.edgeql'
#     'api/queries/get_companies_by_name.edgeql'
#     'api/queries/get_people.edgeql'
#     'api/queries/get_people_by_id.edgeql'
#     'api/queries/get_people_by_id_employers.edgeql'
#     'api/queries/get_people_by_name.edgeql'
# WITH:
#     $ edgedb-py --file api/generated_queries.py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetCompaniesByIdEmployeesResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    employment_title: str | None
    start_date: datetime.datetime | None
    end_date: datetime.datetime | None


@dataclasses.dataclass
class GetCompaniesResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    company_id: int
    headcount: int | None


@dataclasses.dataclass
class GetPeopleByIdEmployersResult(NoPydanticValidation):
    id: uuid.UUID
    company_id: int
    name: str
    employment_title: str | None
    start_date: datetime.datetime | None
    end_date: datetime.datetime | None


@dataclasses.dataclass
class GetPeopleResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    person_id: int


async def get_companies(
    executor: edgedb.AsyncIOExecutor,
) -> list[GetCompaniesResult]:
    return await executor.query(
        """\
        select Company { 
            name, 
            company_id, 
            headcount 
        };\
        """,
    )


async def get_companies_by_id(
    executor: edgedb.AsyncIOExecutor,
    *,
    company_id: int,
) -> GetCompaniesResult | None:
    return await executor.query_single(
        """\
        select Company { 
            name, 
            company_id, 
            headcount 
        }
        filter .company_id = <int32>$company_id
        limit 1
        ;\
        """,
        company_id=company_id,
    )


async def get_companies_by_id_employees(
    executor: edgedb.AsyncIOExecutor,
    *,
    company_id: int,
) -> list[GetCompaniesByIdEmployeesResult]:
    return await executor.query(
        """\
        select (
            select Company { 
                company_id, 
                employees: {
                    name,
                    employment_title := @employment_title,
                    start_date := @start_date,
                    end_date := @end_date
                }  
            }
            filter .company_id = <int32>$company_id
            limit 1
        ).employees
        ;\
        """,
        company_id=company_id,
    )


async def get_companies_by_name(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
) -> list[GetCompaniesResult]:
    return await executor.query(
        """\
        select Company { 
            name, 
            company_id, 
            headcount 
        }
        filter .name ilike '%' ++ <str>$name ++ '%'
        ;\
        """,
        name=name,
    )


async def get_people(
    executor: edgedb.AsyncIOExecutor,
) -> list[GetPeopleResult]:
    return await executor.query(
        """\
        select Person { 
            name, 
            person_id
        };\
        """,
    )


async def get_people_by_id(
    executor: edgedb.AsyncIOExecutor,
    *,
    person_id: int,
) -> GetPeopleResult | None:
    return await executor.query_single(
        """\
        select Person { 
            name, 
            person_id
        }
        filter .person_id = <int32>$person_id
        limit 1
        ;\
        """,
        person_id=person_id,
    )


async def get_people_by_id_employers(
    executor: edgedb.AsyncIOExecutor,
    *,
    person_id: int,
) -> list[GetPeopleByIdEmployersResult]:
    return await executor.query(
        """\
        select (
            select Person { 
                name, 
                person_id,
                employers := .<employees[IS Company] {
                    company_id,
                    name,
                    employment_title := @employment_title,
                    start_date := @start_date,
                    end_date := @end_date
                }  
            }
            filter .person_id = <int32>$person_id
            limit 1
        ).employers
        ;\
        """,
        person_id=person_id,
    )


async def get_people_by_name(
    executor: edgedb.AsyncIOExecutor,
    *,
    name: str,
) -> list[GetPeopleResult]:
    return await executor.query(
        """\
        select Person { 
            name, 
            person_id
        }
        filter .name ilike '%' ++ <str>$name ++ '%'
        ;\
        """,
        name=name,
    )
